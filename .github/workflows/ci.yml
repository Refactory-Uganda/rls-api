name: CI/CD Pipeline

on:
  push:
    branches:
      - development
      - staging
      - main
  pull_request:
    branches:
      - development

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017
        options: --health-cmd="mongo --eval 'db.runCommand({ ping:1 })'" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Install dependencies
        run: npm ci  # Using npm ci for CI environments

      - name: Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Install Cypress (if not cached)
        run: npx cypress install

      - name: Wait for MongoDB
        run: |
          echo "Waiting for MongoDB to be ready..."
          for i in {1..30}; do
            if mongo --eval 'db.runCommand({ ping: 1 })'; then
              echo "MongoDB is ready."
              break
            fi
            echo "Waiting for MongoDB to start..."
            sleep 2
          done

      - name: Build NestJS API
        run: npm run build

      - name: Run tests (including API tests)
        run: npm run test:e2e

  deploy-staging:
    if: github.ref == 'refs/heads/staging'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy to staging environment
        env:
          STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
          SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
        run: |
          echo "Deploying to staging environment..."
          if ! ssh -o StrictHostKeyChecking=no -i $SSH_KEY user@$STAGING_SERVER "bash deploy-staging.sh"; then
            echo "Deployment to staging failed!" >&2
            exit 1
          fi

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy to production
        env:
          PRODUCTION_SERVER: ${{ secrets.PRODUCTION_SERVER }}
          SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
        run: |
          echo "Deploying to production..."
          if ! ssh -o StrictHostKeyChecking=no -i $SSH_KEY user@$PRODUCTION_SERVER "bash deploy-production.sh"; then
            echo "Deployment to production failed!" >&2
            exit 1
          fi
