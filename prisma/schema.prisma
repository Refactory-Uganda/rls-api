// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId 
  Title       String   @unique
  Description String?
  Duration    String
  courseOutline    String[]    
  requirements     String[]  
  assessmentMode   AssessmentMode? 
  facilitatorId    String? @db.ObjectId
  facilitator      User?   @relation(fields: [facilitatorId],references: [id])
  award            String?           
  courseObjective  String[]      
  status      CourseStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  topics      Topic[]  @relation("CourseTopics")
  quiz        Quiz[]   @relation("Quiz")
  image       String?
}


model Topic {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  Title       String   @unique
  Description String?
  createdAt   DateTime @default(now())
  courseId    String?   @map("_courseId") @db.ObjectId
  Course      Course?   @relation(fields: [courseId], references: [id], name: "CourseTopics", onDelete:Cascade)
  image   String?

  Lesson Lesson[]
}

model Lesson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  text      String?
  content   TextContent[]
  slides    Slide[]     @relation("LessonSlides")
  topic     Topic?    @relation(fields: [topicId], references: [id], onDelete:Cascade)
  topicId   String?   @db.ObjectId
  quiz      Quiz[]    @relation("Quiz")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Slide {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  lesson    Lesson   @relation("LessonSlides", fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String   @db.ObjectId
  title     String 
  order     Int      //defines the order of slides within a lesson
  content   String
  contentType  slideContentType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum slideContentType {
  TEXT
  IMAGE 
}

enum AssessmentMode {
  QUIZ
  ASSIGNMENT
}


model Quiz {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  description String?
  questions Question[]
  Course      Course?   @relation(fields: [courseId], references: [id], name: "Quiz", onDelete:Cascade)
  courseId  String?     @unique @db.ObjectId
  lesson    Lesson?     @relation(fields: [lessonId], references: [id], name: "Quiz", onDelete:Cascade)
  attempts  QuizAttempt[]
  lessonId  String?     @unique @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  answer    String
  order     Int
  explanation String?
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  option Option[]
  userAnswers UserAnswer[]
}


model Option {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  optionText String
  iscorrect Boolean
  order Int
  questionId String? @db.ObjectId
  question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[] @relation("OptionUserAnswers")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  externalId String @unique // ID from RIMS
  email     String   @unique
  firstName String
  lastName String
  userGroup     Groups
  nationality String?
  residence String?
  refresh_token String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Course Course[]
}

enum Role {
  USER
  ADMIN
  STAFF
  STUDENT
}

model QuizAttempt {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  // user      User     @relation(fields: [userId], references: [id])
  // userId    String   @db.ObjectId
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    String   @db.ObjectId

  answers   UserAnswer[]
  score     Float
  maxScore  Float
  status    AttemptStatus @default(IN_PROGRESS)

  startedAt DateTime @default(now())
  completedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([quizId])
}
model UserAnswer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String @db.ObjectId
  
  quizAttemptId String @db.ObjectId
  quizAttempt   QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  selectedOption    Option @relation(fields: [selectedOptionId], references: [id], name: "OptionUserAnswers", onDelete: Cascade)
  selectedOptionId          String @db.ObjectId

  isCorrect Boolean
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([questionId])
  @@index([quizAttemptId])
  @@index([selectedOptionId])
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED 
}

enum CourseStatus {
  DRAFT
  PUBLISHED
}

enum Groups {
  Administrator
  Staff 
  Student 
  User 
} 

model TextContent {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  heading      String
  
  notes        Note[]    
  subHeadings  SubHeading[]

  lessonId String? @db.ObjectId
  lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
  // quizzes      Quiz[]    
}

model Note {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  notesText  String
  textContentId String? @db.ObjectId
  textContent   TextContent? @relation(fields: [textContentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
}

model SubHeading {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId 
  subText       String
  textContentId String? @db.ObjectId
  textContent   TextContent? @relation(fields: [textContentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
}

