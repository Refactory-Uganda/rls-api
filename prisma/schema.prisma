// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  Title       String   @unique
  Description String?
  Duration    String
  status      CourseStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  topics      Topic[]  @relation("CourseTopics")
}

model Topic {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  Title       String   @unique
  Description String?
  createdAt   DateTime @default(now())
  courseId    String?   @map("_courseId") @db.ObjectId
  Course      Course?   @relation(fields: [courseId], references: [id], name: "CourseTopics", onDelete:Cascade)

  Lesson Lesson[]
}

model Lesson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   TextContent[]
  topic     Topic?    @relation(fields: [topicId], references: [id], onDelete:Cascade)
  topicId   String?   @db.ObjectId
  quiz      Quiz?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  description String?
  questions Question[]
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete:Cascade)
  lessonId  String     @unique @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  // options   String[] 
  answer    String
  order     Int
  explanation String?
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Option Option[]
}


model Option {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  optionText String
  iscorrect Boolean
  order Int
  questionId String? @db.ObjectId
  question Question? @relation(fields: [questionId], references: [id])
}


enum CourseStatus {
  DRAFT
  PUBLISHED
}

model TextContent {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  heading      String
  
  notes        Note[]    
  subHeadings  SubHeading[]

  lessonId String? @db.ObjectId
  lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
  // quizzes      Quiz[]    
}

model Note {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  notesText  String
  textContentId String? @db.ObjectId
  textContent   TextContent? @relation(fields: [textContentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
}

model SubHeading {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId 
  subText       String
  textContentId String? @db.ObjectId
  textContent   TextContent? @relation(fields: [textContentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
}

